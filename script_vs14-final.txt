-- DROP SCHEMA public cascade;
CREATE SCHEMA IF NOT EXISTS public;

SET SEARCH_PATH TO public;
SHOW SEARCH_PATH;

CREATE TABLE IF NOT EXISTS fornecedor (
	codigo SERIAL,
	nome VARCHAR(45) NOT NULL,
  	cpf_cnpj VARCHAR(18) NOT NULL UNIQUE,
	telefone VARCHAR(14) NOT NULL,
  	status CHAR(1) NOT NULL,
  	PRIMARY KEY (codigo)
);

CREATE TABLE IF NOT EXISTS produto (
  	codigo BIGSERIAL NOT NULL,
  	nome VARCHAR(45) NOT NULL,
	quantidade DECIMAL(4,2) NULL,
  	valor_compra DECIMAL(8,2) NOT NULL,
  	valor_venda DECIMAL(8,2) NOT NULL,
  	status CHAR(1) NOT NULL,
  	PRIMARY KEY (codigo)
);

CREATE TABLE IF NOT EXISTS cliente (
  	codigo SERIAL,
  	nome VARCHAR(45) NOT NULL,
  	cpf CHAR(14) NOT NULL UNIQUE,
  	email VARCHAR(45) NULL,
  	telefone VARCHAR(14) NULL,
  	status CHAR(1) NOT NULL,
  	PRIMARY KEY (codigo)
);

CREATE TABLE IF NOT EXISTS funcionario (
  	codigo SERIAL,
  	tipo CHAR(1) NOT NULL,
  	nome VARCHAR(45) NOT NULL,
  	cpf CHAR(14) NOT NULL UNIQUE,
  	telefone VARCHAR(14) NOT NULL,
  	rua VARCHAR(40) NULL,
	bairro VARCHAR(40) NULL,
	numero INT NULL,
	estado VARCHAR(2) NULL,
	cidade VARCHAR(40) NULL,
	login VARCHAR(20) NOT NULL UNIQUE,
  	senha VARCHAR(20) NOT NULL,
  	salario DECIMAL(8,2) NULL,
  	status CHAR(1) NOT NULL,
  	PRIMARY KEY (codigo)
);

CREATE TABLE IF NOT EXISTS caixa (
  	codigo BIGSERIAL,
  	funcionario_codigo INT NOT NULL,
  	saldo DECIMAL(8,2) NOT NULL,
  	entrada DECIMAL(8,2) NOT NULL,
  	saida DECIMAL(8,2) NOT NULL,
  	situacao CHAR(1) NOT NULL,
  	data_abertura TIMESTAMP NOT NULL,
  	PRIMARY KEY (codigo),
  	FOREIGN KEY (funcionario_codigo) REFERENCES funcionario (codigo)
);

CREATE TABLE IF NOT EXISTS tipo_despesa(
	codigo SERIAL, 
	descricao VARCHAR(45) NOT NULL,
	status CHAR(1) NOT NULL,
	PRIMARY KEY (codigo)
);

CREATE TABLE IF NOT EXISTS despesa (
  	codigo BIGSERIAL,
	caixa_codigo INT NOT NULL,
	tipo_despesa_codigo INT NOT NULL,
  	valor DECIMAL(8,2) NOT NULL,
  	data_lancamento DATE NOT NULL,
  	forma_pagamento VARCHAR(17) NOT NULL,
	status CHAR(1) NOT NULL,
  	PRIMARY KEY (codigo),
  	FOREIGN KEY (caixa_codigo) REFERENCES caixa (codigo),
	FOREIGN KEY (tipo_despesa_codigo) REFERENCES tipo_despesa (codigo)
);

CREATE TABLE IF NOT EXISTS venda (
  	cupom_fiscal BIGSERIAL,
  	caixa_codigo INT NOT NULL,
  	cliente_codigo INT NULL,
  	data_venda DATE NOT NULL,
  	valor_total DECIMAL(8,2) NOT NULL,
  	forma_pagamento VARCHAR(17) NOT NULL,
  	PRIMARY KEY (cupom_fiscal),
  	FOREIGN KEY (cliente_codigo) REFERENCES cliente (codigo),
  	FOREIGN KEY (caixa_codigo) REFERENCES caixa (codigo)
);

CREATE TABLE IF NOT EXISTS item_venda (
  	produto_codigo INT NOT NULL,
  	venda_cupom_fiscal INT NOT NULL,
  	valor DECIMAL(8,2) NOT NULL,
  	quantidade DECIMAL(4,2) NOT NULL,
  	PRIMARY KEY (produto_codigo, venda_cupom_fiscal),
  	FOREIGN KEY (produto_codigo) REFERENCES produto (codigo),
  	FOREIGN KEY (venda_cupom_fiscal) REFERENCES venda (cupom_fiscal)
);

CREATE TABLE IF NOT EXISTS compra (
  	codigo BIGSERIAL,
  	fornecedor_codigo INT NOT NULL,
  	caixa_codigo INT NOT NULL,
  	data_compra DATE NOT NULL,
  	valor_total DECIMAL(8,2) NOT NULL,
  	forma_pagamento VARCHAR(17) NOT NULL,
  	PRIMARY KEY (codigo),
  	FOREIGN KEY (fornecedor_codigo)REFERENCES fornecedor (codigo),
  	FOREIGN KEY (caixa_codigo) REFERENCES caixa (codigo)
);

CREATE TABLE IF NOT EXISTS item_compra (
  	compra_codigo INT NOT NULL,
  	produto_codigo INT NOT NULL,
  	valor DECIMAL(8,2) NOT NULL,
  	quantidade DECIMAL(4,2) NOT NULL,
  	PRIMARY KEY (compra_codigo, produto_codigo ),
  	FOREIGN KEY (compra_codigo) REFERENCES compra (codigo),
  	FOREIGN KEY (produto_codigo) REFERENCES produto (codigo)
);

/* INICIO TRIGGER */
CREATE OR REPLACE FUNCTION atualiza_estoque_venda()

RETURNS TRIGGER AS $$

BEGIN

	IF (TG_OP='INSERT') THEN
			UPDATE produto SET quantidade = quantidade - new.quantidade WHERE codigo = new.produto_codigo;
		RETURN new;
	END IF;
	IF (TG_OP='UPDATE') THEN
			UPDATE produto SET quantidade = quantidade + old.quantidade - new.quantidade WHERE codigo = new.produto_codigo;
		RETURN new;
	END IF;
	IF (TG_OP='DELETE') THEN
			UPDATE produto SET quantidade = quantidade + old.quantidade WHERE codigo = new.produto_codigo;
		RETURN new;
	END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER tg_atualiza_estoque_venda AFTER INSERT OR UPDATE OR DELETE ON item_venda FOR EACH ROW EXECUTE PROCEDURE atualiza_estoque_venda();
/* FIM TRIGGER */

/* INICIO TRIGGER */
CREATE OR REPLACE FUNCTION atualiza_estoque_compra()

RETURNS TRIGGER AS $$

BEGIN
	IF (TG_OP='INSERT') THEN
			UPDATE produto SET quantidade = quantidade + new.quantidade WHERE codigo = new.produto_codigo;
		RETURN NEW;
	END IF;
	IF (TG_OP='UPDATE') THEN
			UPDATE produto SET quantidade = quantidade - old.quantidade + new.quantidade WHERE codigo = new.produto_codigo;
		RETURN NEW;
	END IF;
	IF (TG_OP='DELETE') THEN
			UPDATE produto SET quantidade = quantidade - old.quantidade WHERE codigo = new.produto_codigo;
		RETURN NEW;
	END IF;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER tg_atualiza_estoque_compra AFTER INSERT OR UPDATE OR DELETE ON item_compra FOR EACH ROW EXECUTE PROCEDURE atualiza_estoque_compra();
/* FIM TRIGGER */

/* INICIO FUNCTION */
CREATE OR REPLACE FUNCTION atualiza_caixa_venda(IN codigo_funcionario integer, IN valor decimal(8,2))  
RETURNS INTEGER 
AS $$
BEGIN
    UPDATE caixa 
    SET entrada = entrada + valor , saldo = saldo + valor 
    WHERE caixa.funcionario_codigo = codigo_funcionario AND caixa.situacao = 'A';
	return 1;
	COMMIT;
END;
$$
LANGUAGE PLPGSQL;
/* FIM FUNCTION */

/* INICIO FUNCTION */
CREATE OR REPLACE FUNCTION atualiza_caixa_compra(IN codigo_funcionario integer, IN valor decimal(8,2))  
RETURNS INTEGER 
AS $$
BEGIN
    UPDATE caixa 
    SET saida = saida + valor , saldo = saldo - valor 
    WHERE caixa.funcionario_codigo = codigo_funcionario AND caixa.situacao = 'A';
	return 1;
	COMMIT;
END;
$$
LANGUAGE PLPGSQL;
/* FIM FUNCTION */

/* INICIO FUNCTION */
CREATE OR REPLACE FUNCTION atualiza_caixa_despesa(IN codigo_funcionario integer, IN valor decimal(8,2)) RETURNS integer
AS $$
BEGIN
    UPDATE caixa 
    SET saida = saida + valor, saldo = saldo - valor 
    WHERE caixa.funcionario_codigo = codigo_funcionario AND caixa.situacao = 'A';
	return 1;
    COMMIT;
END;
$$
LANGUAGE PLPGSQL;
/* FIM FUNCTION */

-- INSERTS --
INSERT INTO fornecedor (nome, cpf_cnpj, telefone, status) VALUES 
	('João do Morango', '80.868.341/0001-12', '(18)994762837', 'A'),
	('José da Maçã', '84.813.454/0001-71', '(11)994762837', 'A'),
    ('Joaquim da Melancia', '88.665.972/0001-46', '(17)994762837', 'A'),
    ('Joana da Mexirica', '72.879.632/0001-88', '(18)996762837', 'A'),
    ('Jesus do Mirtilo', '04.653.582/0001-66', '(18)994762846', 'A');

-- inserindo produtos 
INSERT INTO produto(nome, valor_compra, valor_venda, quantidade, status) VALUES 
	('Melancia', 1.20, 2.19, 32.35, 'A'),
    ('Laranja', 0.99, 1.99, 52.34, 'A'),
    ('Banana', 0.99, 2.00, 25.8, 'A'),
    ('Tomate', 1.99, 3.50, 20.2, 'A'),
    ('Maçã', 1.99, 3.00, 30.9, 'A'),
	('Manga', 1.99, 4.00, 30, 'A'),
    ('Bandeja de morango', 1.99, 3.00, 50, 'A'),
    ('Abacaxi', 1.99, 7.00, 25, 'A'),
    ('Goiaba', 1.99, 5.00, 20, 'A'),
    ('Bandeja de uva', 1.99, 5.00, 30, 'A');     

INSERT INTO cliente(nome, cpf, email, telefone, status) VALUES
	('Marcos Andrade','387.434.903-95', 'marcos@gmail.com', '(45)994762837', 'A'),
    ('Analice Krepski','113.774.852-42', 'analice@gmail.com', '(17)948362846', 'A'),
    ('Giovana Fernandes','600.602.331-84', 'giovana@gmail.com', NULL, 'A'),
    ('Ilda Marlene','482.851.608-58', 'ilda@gmail.com', NULL, 'A'),
    ('Vicente Manoel','886.425.634-27', 'vicente@gmail.com', NULL, 'A');

INSERT INTO funcionario(bairro, cidade, cpf, estado, login, nome, numero, rua, salario, senha, status, telefone, tipo)
	VALUES
	('Centro', 'Pres. Epitácio', '100.853.414-52', 'SP', 'jorge', 'Jorge', 153, 'Rua Maceió', 2600, '123', 'A', '(18)996457283', 'F'),
	('Centro', 'Pres. Epitácio', '867.498.553-00', 'SP', 'juliana', 'Juliana', 1576, 'Rua Salvador', 3400, 'ger', 'A', '(18)937452738', 'G');

INSERT INTO caixa(funcionario_codigo, saldo, entrada, saida, situacao, data_abertura) VALUES 
	(2, 0.00, 0.00, 0.00, 'A', '2022-11-18 08:02:36');
	
INSERT INTO tipo_despesa(descricao, status) VALUES 
	('Água', 'A'),
	('Luz', 'A'),
	('Internet', 'A'),
	('Aluguel', 'A');

INSERT INTO despesa(caixa_codigo, tipo_despesa_codigo, valor, data_lancamento, forma_pagamento, status) VALUES 
	(1, 1, 500.0, '2022-11-18', 'Dinheiro', 'A'),
	(1, 2, 200.0, '2022-11-18', 'Cartão de débito', 'A'),
	(1, 4, 800.0, '2022-11-18', 'Pix', 'A');

INSERT INTO venda(caixa_codigo, cliente_codigo, data_venda, valor_total, forma_pagamento) VALUES 
	(1, 1, '2022-11-18', 17.00, 'Pix'), 
    (1, 2, '2022-11-18', 40.00, 'Dinheiro'), 
    (1, 2, '2022-11-18', 35.00, 'Cartão de crédito'), 
    (1, 3, '2022-11-18', 30.00, 'Cartão de débito'), 
    (1, 3, '2022-11-18', 15.00, 'Pix'), 
    (1, 4, '2022-11-18', 42.00, 'Dinheiro'), 
    (1, NULL, '2022-11-18', 32.00, 'Cartão de crédito'), 
    (1, NULL, '2022-11-18', 33.00, 'Cartão de débito');

INSERT INTO item_venda(produto_codigo, venda_cupom_fiscal, valor, quantidade) VALUES 
	(1, 1, 10.00, 5.47),
    (2, 1, 7.00, 2.34),
    (2, 2, 20.00, 3.6),
    (3, 2, 20.00, 2.6),
    (3, 3, 30.00, 6.9),
    (4, 3, 5.00, 1.22),
    (4, 4, 15.00, 4.56),
    (1, 4, 15.00, 3.56),
	(6, 5, 10.00, 5),
    (7, 5, 5.00, 2),
    (7, 6, 22.00, 3),
    (8, 6, 20.00, 2),
    (8, 7, 17.00, 6),
    (9, 7, 15.00, 1),
    (9, 8, 15.00, 4),
    (6, 8, 18.00, 3);

INSERT INTO compra (fornecedor_codigo, caixa_codigo, data_compra, valor_total, forma_pagamento) VALUES
	(1, 1, '2022-11-18', 18.00, 'Dinheiro'),
    (2, 1, '2022-11-18', 16.00, 'Cartão de débito'),
    (3, 1, '2022-11-18', 18.00, 'Cartão de crédito'),
    (4, 1, '2022-11-18', 16.00, 'Pix');
    
INSERT INTO item_compra (compra_codigo, produto_codigo, valor, quantidade) VALUES
	(1, 1, 10.00, 2.5),
    (2, 2, 24.6, 4.6),
    (3, 3, 29.00, 10);
	
UPDATE caixa SET situacao = 'F' WHERE codigo = 1;
